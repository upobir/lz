#!/usr/bin/bash

lz_check_scripts_folder() {
    if [ -z "$LZ_SCRIPTS_FOLDER" ]; then
        echo "LZ_SCRIPTS_FOLDER is not set. Please set it."
        return 1
    fi

    if [ ! -d "$LZ_SCRIPTS_FOLDER" ]; then
        echo "LZ_SCRIPTS_FOLDER is not a valid folder. Please set it to the folder where the lazy scripts are located."
        return 1
    fi

    return 0
}


lz_initialize() {
    unset lz_function_map

    lz_function_list=()
    declare -gA lz_function_map

    LZ_MARKER="## lz function"

    lz_check_scripts_folder
    if [ $? -ne 0 ]; then
        return 1
    fi

    return 0
}

lz_parse_single_file() {
    while IFS= read -r line; do
        function_name=${line%%(*}
        lz_function_list+=("$function_name")
    done < <(grep -A1 --no-group-separator "$LZ_MARKER" "$1" | grep -v "$LZ_MARKER")
}

lz_collect_functions() {
    lz_script_files=("$LZ_SCRIPTS_FOLDER"/*.lz.sh)

    if [ ${#lz_script_files[@]} -eq 0 ] || [ ! -e "${lz_script_files[0]}" ]; then
        echo "No script files found."
        echo
        return 0
    fi

    for file in "${lz_script_files[@]}"; do
        source "$file"

        lz_parse_single_file "$file"
    done
}

lz_build_function_map() {
    for function_name in ${lz_function_list[@]}; do
        argument_name="${function_name//_/-}"

        if [[ -n ${lz_function_map[$argument_name]} ]]; then
            echo "Duplicate function: $function_name"
            return 1
        fi

        lz_function_map[$argument_name]=$function_name
    done
}

lz_collect_and_build() {
    lz_collect_functions

    lz_build_function_map
    if [ $? -ne 0 ]; then
        return 1
    fi

    return 0
}

lz_print_available_scripts() {
    lz_sorted_script_names=( $(printf "%s\n" "${!lz_function_map[@]}" | sort) )

    echo "Available scripts:"
    for argument_name in "${lz_sorted_script_names[@]}"; do
        echo "    " "$argument_name"
    done    
}

lz_execute() {
    if [ $# -ne 1 ]; then
        lz_print_available_scripts
        return 0
    fi

    lz_argument="$1"
    if [ -z ${lz_function_map[$lz_argument]} ]; then
        echo "Invalid argument: $lz_argument"
        echo
        lz_print_available_scripts
        return 1
    fi

    # call the script
    ${lz_function_map[$lz_argument]}
}


lz_initialize
if [ $? -ne 0 ]; then
    return 1
fi

lz_collect_and_build
if [ $? -ne 0 ]; then
    return 1
fi

lz_execute $@
